{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diana\\\\Desktop\\\\C8288-PROYECTO\\\\C8288_ProyectFinal\\\\frontend\\\\src\\\\components\\\\Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport authService from '../services/authService';\n\n//Esta es la data que se enviará mediante el método post al servidor\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    nombre: '',\n    email: '',\n    contrasenia: '',\n    rol: 'Operador'\n  });\n  const handleChange = e => {\n    //console.log(\"e.target.name:\",e.target.name);\n    //console.log(\"e.target.value:\",e.target.value);\n    //Acá se actualizan los datos de la propiedad definida por e.target.name (name hace ref. al nombre del elemento), por el valor e.target.value\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      //Acá se pasa la data con los datos introducidos en el form, haciendo uso de la función register, la cual hará una solicitud post al servidor\n      const res = await authService.register(formData);\n      //Se muestra el mensaje de usuario registrado exitosamente!     \n      alert('Usuario registrado exitosamente!');\n    } catch (error) {\n      alert(error.response.data.error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"nombre\",\n      placeholder: \"Nombre\",\n      onChange: handleChange,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      name: \"email\",\n      placeholder: \"Email\",\n      onChange: handleChange,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      name: \"contrasenia\",\n      placeholder: \"Contrase\\xF1a\",\n      onChange: handleChange,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"rol\",\n      onChange: handleChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Operador\",\n        children: \"Operador\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Administrador\",\n        children: \"Administrador\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Registrar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Register, \"CcQIU384Bx7dF6t53tcp6sNY+5I=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","authService","jsxDEV","_jsxDEV","Register","_s","formData","setFormData","nombre","email","contrasenia","rol","handleChange","e","target","name","value","handleSubmit","preventDefault","res","register","alert","error","response","data","onSubmit","children","type","placeholder","onChange","required","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/diana/Desktop/C8288-PROYECTO/C8288_ProyectFinal/frontend/src/components/Register.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport authService from '../services/authService';\r\n\r\n//Esta es la data que se enviará mediante el método post al servidor\r\nconst Register = () => {\r\n  const [formData, setFormData] = useState({\r\n    nombre: '',\r\n    email: '',\r\n    contrasenia: '',\r\n    rol: 'Operador',\r\n  });\r\n\r\nconst handleChange = (e) => {\r\n    //console.log(\"e.target.name:\",e.target.name);\r\n    //console.log(\"e.target.value:\",e.target.value);\r\n    //Acá se actualizan los datos de la propiedad definida por e.target.name (name hace ref. al nombre del elemento), por el valor e.target.value\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n};\r\n\r\nconst handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      //Acá se pasa la data con los datos introducidos en el form, haciendo uso de la función register, la cual hará una solicitud post al servidor\r\n      const res = await authService.register(formData);\r\n      //Se muestra el mensaje de usuario registrado exitosamente!     \r\n      alert('Usuario registrado exitosamente!');\r\n    }catch (error) {\r\n        alert(error.response.data.error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" name=\"nombre\" placeholder=\"Nombre\" onChange={handleChange} required />\r\n      <input type=\"email\" name=\"email\" placeholder=\"Email\" onChange={handleChange} required />\r\n      <input type=\"password\" name=\"contrasenia\" placeholder=\"Contraseña\" onChange={handleChange} required />\r\n      <select name=\"rol\" onChange={handleChange}>\r\n        <option value=\"Operador\">Operador</option>\r\n        <option value=\"Administrador\">Administrador</option>\r\n      </select>\r\n      <button type=\"submit\">Registrar</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Register;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,yBAAyB;;AAEjD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC;IACvCQ,MAAM,EAAE,EAAE;IACVC,KAAK,EAAE,EAAE;IACTC,WAAW,EAAE,EAAE;IACfC,GAAG,EAAE;EACP,CAAC,CAAC;EAEJ,MAAMC,YAAY,GAAIC,CAAC,IAAK;IACxB;IACA;IACA;IACAN,WAAW,CAAC;MAAE,GAAGD,QAAQ;MAAE,CAACO,CAAC,CAACC,MAAM,CAACC,IAAI,GAAGF,CAAC,CAACC,MAAM,CAACE;IAAM,CAAC,CAAC;EACjE,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOJ,CAAC,IAAK;IAC9BA,CAAC,CAACK,cAAc,CAAC,CAAC;IAClB,IAAI;MACF;MACA,MAAMC,GAAG,GAAG,MAAMlB,WAAW,CAACmB,QAAQ,CAACd,QAAQ,CAAC;MAChD;MACAe,KAAK,CAAC,kCAAkC,CAAC;IAC3C,CAAC,QAAOC,KAAK,EAAE;MACXD,KAAK,CAACC,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACF,KAAK,CAAC;IACpC;EACF,CAAC;EAED,oBACEnB,OAAA;IAAMsB,QAAQ,EAAER,YAAa;IAAAS,QAAA,gBAC3BvB,OAAA;MAAOwB,IAAI,EAAC,MAAM;MAACZ,IAAI,EAAC,QAAQ;MAACa,WAAW,EAAC,QAAQ;MAACC,QAAQ,EAAEjB,YAAa;MAACkB,QAAQ;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACzF/B,OAAA;MAAOwB,IAAI,EAAC,OAAO;MAACZ,IAAI,EAAC,OAAO;MAACa,WAAW,EAAC,OAAO;MAACC,QAAQ,EAAEjB,YAAa;MAACkB,QAAQ;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxF/B,OAAA;MAAOwB,IAAI,EAAC,UAAU;MAACZ,IAAI,EAAC,aAAa;MAACa,WAAW,EAAC,eAAY;MAACC,QAAQ,EAAEjB,YAAa;MAACkB,QAAQ;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtG/B,OAAA;MAAQY,IAAI,EAAC,KAAK;MAACc,QAAQ,EAAEjB,YAAa;MAAAc,QAAA,gBACxCvB,OAAA;QAAQa,KAAK,EAAC,UAAU;QAAAU,QAAA,EAAC;MAAQ;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1C/B,OAAA;QAAQa,KAAK,EAAC,eAAe;QAAAU,QAAA,EAAC;MAAa;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eACT/B,OAAA;MAAQwB,IAAI,EAAC,QAAQ;MAAAD,QAAA,EAAC;IAAS;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEX,CAAC;AAAC7B,EAAA,CAvCID,QAAQ;AAAA+B,EAAA,GAAR/B,QAAQ;AAyCd,eAAeA,QAAQ;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}