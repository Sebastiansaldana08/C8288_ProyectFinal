{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diana\\\\Desktop\\\\C8288-PROYECTO\\\\C8288_ProyectFinal\\\\frontend\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport recursoService from '../services/recursoService';\n\n//Importo el formulario para los recursos\nimport RecursoForm from './RecursoForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  //En un arreglo se almacenarán los recursos\n  const [recursos, setRecursos] = useState([]);\n\n  //Se crea la variable token (inicialmente vacía) donde se almacenará el token que se guardó en el localStorage\n  const [token, setToken] = useState('');\n\n  //Crearé una variable que almacenará el estado del botón (cuando se le da click, se mostrará el componente)\n  const [mostrarFormulario, setMostrarFormulario] = useState(false); //Inicialmente será false, pero cuando dé click en el botón, se mostrará el componente\n\n  //Defino una función manejadora de eventos que se activiará cuando se dé click sobre el botón\n  const click = () => {\n    //Acá cambio el valor de mostrarFormulario (actualmente en false) a true para mostrar el componente\n    setMostrarFormulario(true);\n  };\n\n  //Cuando se renderiza el componente por primera vez, se obtiene el token almacenado como 'token' en el localStorage\n  useEffect(() => {\n    //Se obtiene el token almacenado en el localStorage\n    const storedToken = localStorage.getItem('token');\n\n    //Si se obtiene el token, entonces\n    if (storedToken) {\n      //se actualiza la variable 'token' inicialmente vacía\n      setToken(storedToken);\n\n      //Se usa la función creada fetchRecursos para obtener los recursos almacenados en la BD\n      fetchRecursos(storedToken);\n    }\n    //De lo contrario, se envía el mensaje de que el usuario no está autenticado\n    else {\n      alert('No estás autenticado. Inicia sesión.');\n      //Se redirige al login en caso no esté el token almacenado en el localStorage\n      window.location.href = '/login';\n    }\n  }, []);\n\n  //Esta función mostrará \n  const fetchRecursos = async authToken => {\n    try {\n      //Una vez que el usuario se autentifique, se realiza una solicitud GET al servidor para obtener los recursos almacenados en la BD\n      const response = await recursoService.getRecursos(authToken);\n      setRecursos(response.data);\n    } catch (error) {\n      alert('Error al cargar los recursos');\n    }\n  };\n\n  //Acá es donde muestro el componente, pero de FORMA CONDICIONAL (solo cuando se le dé click)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: click,\n      children: \"Crear Recurso\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: recursos.map(recurso => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: recurso.tipo_recurso\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: recurso.estado\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, recurso.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), mostrarFormulario && /*#__PURE__*/_jsxDEV(RecursoForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"xwSPsLKVyvvLLGYhczHhsrxzBJQ=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","recursoService","RecursoForm","jsxDEV","_jsxDEV","Dashboard","_s","recursos","setRecursos","token","setToken","mostrarFormulario","setMostrarFormulario","click","storedToken","localStorage","getItem","fetchRecursos","alert","window","location","href","authToken","response","getRecursos","data","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","recurso","tipo_recurso","estado","id","_c","$RefreshReg$"],"sources":["C:/Users/diana/Desktop/C8288-PROYECTO/C8288_ProyectFinal/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport recursoService from '../services/recursoService';\r\n\r\n//Importo el formulario para los recursos\r\nimport RecursoForm from './RecursoForm';\r\n\r\nconst Dashboard = () => {\r\n    //En un arreglo se almacenarán los recursos\r\n    const [recursos, setRecursos] = useState([]);\r\n\r\n    //Se crea la variable token (inicialmente vacía) donde se almacenará el token que se guardó en el localStorage\r\n    const [token, setToken] = useState('');\r\n\r\n\r\n\r\n\r\n    //Crearé una variable que almacenará el estado del botón (cuando se le da click, se mostrará el componente)\r\n    const [mostrarFormulario,setMostrarFormulario]=useState(false); //Inicialmente será false, pero cuando dé click en el botón, se mostrará el componente\r\n\r\n    //Defino una función manejadora de eventos que se activiará cuando se dé click sobre el botón\r\n    const click=()=>{\r\n      //Acá cambio el valor de mostrarFormulario (actualmente en false) a true para mostrar el componente\r\n      setMostrarFormulario(true);\r\n    };\r\n\r\n\r\n\r\n    //Cuando se renderiza el componente por primera vez, se obtiene el token almacenado como 'token' en el localStorage\r\n    useEffect(() => {\r\n        //Se obtiene el token almacenado en el localStorage\r\n        const storedToken = localStorage.getItem('token');\r\n\r\n        //Si se obtiene el token, entonces\r\n        if (storedToken) {\r\n            //se actualiza la variable 'token' inicialmente vacía\r\n            setToken(storedToken);\r\n\r\n            //Se usa la función creada fetchRecursos para obtener los recursos almacenados en la BD\r\n            fetchRecursos(storedToken);\r\n        }\r\n        //De lo contrario, se envía el mensaje de que el usuario no está autenticado\r\n        else {\r\n            alert('No estás autenticado. Inicia sesión.');\r\n            //Se redirige al login en caso no esté el token almacenado en el localStorage\r\n            window.location.href = '/login';\r\n            }\r\n        }, []);\r\n\r\n        //Esta función mostrará \r\n        const fetchRecursos = async (authToken) => {\r\n            try {\r\n                //Una vez que el usuario se autentifique, se realiza una solicitud GET al servidor para obtener los recursos almacenados en la BD\r\n                const response = await recursoService.getRecursos(authToken);\r\n                setRecursos(response.data);\r\n            } catch (error) {\r\n                alert('Error al cargar los recursos');\r\n            }\r\n    };\r\n\r\n    //Acá es donde muestro el componente, pero de FORMA CONDICIONAL (solo cuando se le dé click)\r\n  return (\r\n    <div>\r\n      <h1>Dashboard</h1>\r\n      <button onClick={click}>Crear Recurso</button>\r\n      <ul>\r\n        {recursos.map((recurso) => (\r\n          <li key={recurso.id}>\r\n            <h3>{recurso.tipo_recurso}</h3>\r\n            <p>{recurso.estado}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {mostrarFormulario && <RecursoForm/>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,4BAA4B;;AAEvD;AACA,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAKtC;EACA,MAAM,CAACW,iBAAiB,EAACC,oBAAoB,CAAC,GAACZ,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEhE;EACA,MAAMa,KAAK,GAACA,CAAA,KAAI;IACd;IACAD,oBAAoB,CAAC,IAAI,CAAC;EAC5B,CAAC;;EAID;EACAb,SAAS,CAAC,MAAM;IACZ;IACA,MAAMe,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;IAEjD;IACA,IAAIF,WAAW,EAAE;MACb;MACAJ,QAAQ,CAACI,WAAW,CAAC;;MAErB;MACAG,aAAa,CAACH,WAAW,CAAC;IAC9B;IACA;IAAA,KACK;MACDI,KAAK,CAAC,sCAAsC,CAAC;MAC7C;MACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IAC/B;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMJ,aAAa,GAAG,MAAOK,SAAS,IAAK;IACvC,IAAI;MACA;MACA,MAAMC,QAAQ,GAAG,MAAMtB,cAAc,CAACuB,WAAW,CAACF,SAAS,CAAC;MAC5Dd,WAAW,CAACe,QAAQ,CAACE,IAAI,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZR,KAAK,CAAC,8BAA8B,CAAC;IACzC;EACR,CAAC;;EAED;EACF,oBACEd,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAAuB,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClB3B,OAAA;MAAQ4B,OAAO,EAAEnB,KAAM;MAAAc,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC9C3B,OAAA;MAAAuB,QAAA,EACGpB,QAAQ,CAAC0B,GAAG,CAAEC,OAAO,iBACpB9B,OAAA;QAAAuB,QAAA,gBACEvB,OAAA;UAAAuB,QAAA,EAAKO,OAAO,CAACC;QAAY;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC/B3B,OAAA;UAAAuB,QAAA,EAAIO,OAAO,CAACE;QAAM;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAFhBG,OAAO,CAACG,EAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGf,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,EACJpB,iBAAiB,iBAAIP,OAAA,CAACF,WAAW;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEV,CAAC;AAACzB,EAAA,CArEID,SAAS;AAAAiC,EAAA,GAATjC,SAAS;AAuEf,eAAeA,SAAS;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}